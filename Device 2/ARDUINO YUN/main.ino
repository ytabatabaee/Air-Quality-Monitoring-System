// Generated by Proteus Visual Designer for Arduino

// Peripheral Configuration Code (Do Not Edit)
//---CONFIG_BEGIN---
#pragma GCC push_options
#pragma GCC optimize ("Os")

#include <core.h> // Required by cpu
#include <cpu.h>
#include <bridge.h> // Required by server
#include <Yun.h>
#include <Controls.h>

#pragma GCC pop_options

// Peripheral Constructors
CPU &cpu = Cpu;
Yun::Server &server = VFP;
Yun::FileStore &storage = FS;
PanelMeter IotSpeedo1 = PanelMeter ("IotSpeedo1");
PushButton IotBtn3 = PushButton ("IotBtn3");
PushButton IotBtn4 = PushButton ("IotBtn4");
PushButton IotBtn5 = PushButton ("IotBtn5");
LineChart IotChart1 = LineChart ("IotChart1");
Indicator IotLED1 = Indicator ("IotLED1");
Indicator IotLED2 = Indicator ("IotLED2");
Indicator IotLED3 = Indicator ("IotLED3");
Indicator IotLED4 = Indicator ("IotLED4");
Indicator IotLED5 = Indicator ("IotLED5");
Indicator IotLED6 = Indicator ("IotLED6");

void peripheral_setup () {
 server.begin (8080);
 storage.begin ();
 IotBtn3.attachEventHandler(&IotBtn3_ControlEvent);
 IotBtn4.attachEventHandler(&IotBtn4_ControlEvent);
 IotBtn5.attachEventHandler(&IotBtn5_ControlEvent);
}

void peripheral_loop() {
 server.poll ();
}
//---CONFIG_END---
// Flowchart Variables
long var_ain;

int state = 0;
float s0 = 0;
float s1 = 0;
float s2 = 0;
float max_s =0;
Time pnow=0;

#define SENSOR0  0
#define SENSOR1  1
#define SENSOR2  2

// Flowchart Routines
void chart_SETUP() {
 Serial.begin(9600);
 cpu.pinMode(SENSOR0, INPUT);
 cpu.pinMode(SENSOR1, INPUT);
 cpu.pinMode(SENSOR2, INPUT);
 IotChart1.setYrange(0,0,500);
 IotChart1.setDataFile("d.txt");
}

void chart_LOOP() {
   s0 = cpu.analogRead(SENSOR0);
   s1 = cpu.analogRead(SENSOR1);
   s2 = cpu.analogRead(SENSOR2);
   s0 = (s0 *500) / 308;
   s1 = (s1 *500) / 308;
   s2 = (s2 *500) / 308; 
   max_s = (s0>s1)? ((s0>s2)?s0:s2):((s1>s2)?s1:s2);
   
   if (max_s >= 0 && max_s <= 50){
      IotLED1.setState(true);
      IotLED2.setState(false);
      IotLED3.setState(false);
      IotLED4.setState(false);
      IotLED5.setState(false);
      IotLED6.setState(false);
    }
   if (max_s >= 51 && max_s <= 100){
      IotLED2.setState(true);
      IotLED1.setState(false);
      IotLED3.setState(false);
      IotLED4.setState(false);
      IotLED5.setState(false);
      IotLED6.setState(false);
    }
   if (max_s >= 101 && max_s <= 150){
      IotLED3.setState(true);
      IotLED1.setState(false);
      IotLED2.setState(false);
      IotLED4.setState(false);
      IotLED5.setState(false);
      IotLED6.setState(false);
    }
   if (max_s >= 151 && max_s <= 200){
      IotLED4.setState(true);
      IotLED1.setState(false);
      IotLED2.setState(false);
      IotLED3.setState(false);
      IotLED5.setState(false);
      IotLED6.setState(false);
    }
   if (max_s >= 201 && max_s <= 300){
      IotLED5.setState(true);
      IotLED1.setState(false);
      IotLED2.setState(false);
      IotLED3.setState(false);
      IotLED4.setState(false);
      IotLED6.setState(false);
   }
   else if (max_s >= 301 && max_s <= 500){
      IotLED6.setState(true);
      IotLED1.setState(false);
      IotLED2.setState(false);
      IotLED3.setState(false);
      IotLED4.setState(false);
      IotLED5.setState(false);
    }

   
   
   
   Time tnow = now();
   if ((tnow - pnow) > 3){
      pnow = tnow;
      IotChart1.writeData().arg(tnow).arg(s0).arg(s1).arg(s2).end();
  }
   
    if (state == 0)
   {
      IotSpeedo1.setValue(s0);
   }
   else if (state == 1)
   {
      IotSpeedo1.setValue(s1);
   }
   else if (state == 2)
   {
      IotSpeedo1.setValue(s2);
   }
   
   // if state == 0 -> CO2
   // if state == 1 -> CO
   // if state == 2-> Main
   
  delay(1000);
}

void IotBtn5_ControlEvent () 
{
   state = 0;
   IotSpeedo1.setLabel("CO2");
}

void IotBtn4_ControlEvent () 
{
   state = 1;
   IotSpeedo1.setLabel("CO");
   IotLED1.setState(true);

}

void IotBtn3_ControlEvent () 
{
   state = 2;
   IotSpeedo1.setLabel("Air Idx");
}

// Entry Points and Interrupt Handlers
void setup () { peripheral_setup();  server.waitForTimeServer();
chart_SETUP(); }
void loop () 
{
   peripheral_loop();  
   chart_LOOP(); 
}
